package(default_visibility = ["//visibility:public"])

load("//tools:defaults.bzl", "karma_web_test")
load("//tools/npm_integration_test:npm_integration_test.bzl", "npm_integration_test")
load("//packages:packages.bzl", PACKAGES_PACKAGES = "PACKAGES")

exports_files([
    "LICENSE",
    "protractor-perf.conf.js",
    "karma-js.conf.js",
    "browser-providers.conf.js",
])

alias(
    name = "tsconfig.json",
    actual = "//packages:tsconfig-build.json",
)

filegroup(
    name = "web_test_bootstrap_scripts",
    # do not sort
    srcs = [
        "@npm//:node_modules/core-js/client/core.js",
        "//packages/zone.js/dist:zone.js",
        "//packages/zone.js/dist:zone-testing.js",
        "//packages/zone.js/dist:task-tracking.js",
        "//:test-events.js",
        "//:shims_for_IE.js",
        # Including systemjs because it defines `__eval`, which produces correct stack traces.
        "@npm//:node_modules/systemjs/dist/system.src.js",
        "@npm//:node_modules/reflect-metadata/Reflect.js",
    ],
)

filegroup(
    name = "angularjs_scripts",
    srcs = [
        # We also declare the unminfied AngularJS files since these can be used for
        # local debugging (e.g. see: packages/upgrade/test/common/test_helpers.ts)
        "@npm//:node_modules/angular/angular.js",
        "@npm//:node_modules/angular/angular.min.js",
        "@npm//:node_modules/angular-1.5/angular.js",
        "@npm//:node_modules/angular-1.5/angular.min.js",
        "@npm//:node_modules/angular-1.6/angular.js",
        "@npm//:node_modules/angular-1.6/angular.min.js",
        "@npm//:node_modules/angular-mocks/angular-mocks.js",
        "@npm//:node_modules/angular-mocks-1.5/angular-mocks.js",
        "@npm//:node_modules/angular-mocks-1.6/angular-mocks.js",
    ],
)

# To run a karma_web_test target locally on SauceLabs:
# 1) have SAUCE_USERNAME, SAUCE_ACCESS_KEY (and optionally a SAUCE_TUNNEL_IDENTIFIER) set in your environment
# 2) open a sauce connection with `./scripts/saucelabs/start-tunnel.sh`
#    NOTE: start-tunnel.sh uses `node_modules/sauce-connect` which is current linux specific:
#          "sauce-connect": "https://saucelabs.com/downloads/sc-4.5.3-linux.tar.gz".
#          On OSX or Windows you'll need to use the appropriate sauce-connect binary.
# 3) run target with `yarn bazel test --config=saucelabs <target>`
#    NOTE: --config=saucelabs is required as it makes the SAUCE_XXX environment variables available to
#          the action. See /.bazelrc.
karma_web_test(
    name = "test_web_all",
    tags = [
        "local",
        "manual",
        "saucelabs",
    ],
    deps = [
        # We combine all tests into a single karma_web_test target
        # as running them as seperate targets in parallel leads to too many
        # browsers being acquired at once in SauceLabs and the tests flake out
        # TODO: this is an example subset of tests below, add all remaining angular tests
        "//packages/common/http/test:test_lib",
        "//packages/common/http/testing/test:test_lib",
        "//packages/common/test:test_lib",
        "//packages/core/test:test_lib",
        "//packages/forms/test:test_lib",
        "//packages/http/test:test_lib",
        "//packages/zone.js/test:karma_jasmine_test_ci",
        # "//packages/router/test:test_lib",
        # //packages/router/test:test_lib fails with:
        # IE 11.0.0 (Windows 8.1.0.0) bootstrap should restore the scrolling position FAILED
        # 	Expected undefined to equal 5000.
        # 	   at stack (eval code:2338:11)
        # 	   at buildExpectationResult (eval code:2305:5)
        # 	   at expectationResultFactory (eval code:858:11)
        # 	   at Spec.prototype.addExpectationResult (eval code:487:5)
        # 	   at addExpectationResult (eval code:802:9)
        # 	   at Anonymous function (eval code:2252:7)
        # 	   at Anonymous function (eval code:339:25)
        # 	   at step (eval code:133:17)
        # 	   at Anonymous function (eval code:114:50)
        # 	   at fulfilled (eval code:104:47)
    ],
)

# *****EXPERIMENTAL*****
# Run test with debug target to run in-place instead of in runfiles:
#   bazel test //:aio_test.debug
npm_integration_test(
    name = "aio_test",
    timeout = "long",
    commands = [
        "$(location @nodejs//:yarn_bin) --cwd aio install",
        # Compile dependencies to ivy
        # Running `ngcc` here (instead of implicitly via `ng build`) allows us to take advantage of
        # the parallel, async mode speed-up (~20-25s on CI).
        "$(location @nodejs//:yarn_bin) --cwd aio ngcc --properties es2015",
        # Build aio
        "$(location @nodejs//:yarn_bin) --cwd aio build --progress=false",
        # Lint the code
        "$(location @nodejs//:yarn_bin) --cwd aio lint",
        # Run unit tests
        "$(location @nodejs//:yarn_bin) --cwd aio test --progress=false --watch=false",
        # Run e2e tests
        "$(location @nodejs//:yarn_bin) --cwd aio e2e --configuration=ci",
        # Run PWA-score tests
        "$(location @nodejs//:yarn_bin) --cwd aio test-pwa-score-ci",
        # Run accessibility tests
        "$(location @nodejs//:yarn_bin) --cwd aio test-a11y-score-localhost",
        # Check the bundle sizes.
        "$(location @nodejs//:yarn_bin) --cwd aio payload-size",
        # Run unit tests for Firebase redirects
        "$(location @nodejs//:yarn_bin) --cwd aio redirects-test",
    ],
    configuration_env_vars = [
        "PROJECT_ROOT",
        "CI_AIO_MIN_PWA_SCORE",
        # CI_CHROMEDRIVER_VERSION_ARG is used in post-install to configure
        # which version of chrome driver webdriver-manager downloads. The version
        # specified should work with your local chrome version.
        # --action_env=CI_CHROMEDRIVER_VERSION_ARG is set in .bazelrc so that the
        # test can access this envirnoment variable if it is set. Alternately,
        # if you can set or override the value used by the test with a --define such as
        # --define=CI_CHROMEDRIVER_VERSION_ARG="--versions.chrome 78.0.3904.105"
        "CI_CHROMEDRIVER_VERSION_ARG",
    ],
    data = [
        # We need the yarn_bin & yarn_files available at runtime
        "@nodejs//:yarn_bin",
        "@nodejs//:yarn_files",
    ],
    tags = [
        # This one should be run explicitly
        "manual",
        # Integration do not work inside of a sandbox as they may run host applications such
        # as chrome (which is run by ng) that require access to files outside of the sandbox.
        # They also need to run locally and not on RBE as they require network access for
        # yarn install & npm install.
        "no-sandbox",
        "no-remote-exec",
    ],
    # Be very specific about what files under /packages are included in the aio_files target
    # glob so we don't include the kitchen sink. Any changes to these files will trigger
    # an aio build on CI.
    # Check files extensions with:
    #   find ./packages -type f | awk -F. '!a[$NF]++{print $NF}'
    test_files = glob(
        include = ["aio/**"],
        exclude = [
            "aio/node_modules/**",
            "aio/**/node_modules/**",
        ],
    ) + [
        "//tools:yarn/check-yarn.js",
        "//tools:npm/@angular_bazel/index.js",
        "//tools:npm/@angular_bazel/package.json",
    ] + ["//%s:aio_files" % pkg for pkg in PACKAGES_PACKAGES],
)
